package com.ws.patient.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;

import com.ws.patient.security.AccountAuthenticationProvider;
import com.ws.patient.security.CustomUserDetailsService;



/**
 * configuration de securit√©
 * 
 * @author Asus T. Grine
 */

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {

	private static final String SIGNING_KEY = "s1f41234pwqdqkl4l12ghg9853123sd";

	private final CustomUserDetailsService userDetailsService;

	private final AccountAuthenticationProvider accountAuthenticationProvider;

	public WebSecurityConfiguration(final CustomUserDetailsService userDetailsService,
			final AccountAuthenticationProvider accountAuthenticationProvider) {
		this.userDetailsService = userDetailsService;
		this.accountAuthenticationProvider = accountAuthenticationProvider;
	}

	@Override
	protected void configure(final AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService);
		auth.authenticationProvider(accountAuthenticationProvider);
	}

	@Override
	@Bean
	public AuthenticationManager authenticationManagerBean() throws Exception {
		return super.authenticationManagerBean();
	}

	@Bean
	public JwtAccessTokenConverter jwtAccessTokenConverter() {
		final JwtAccessTokenConverter jwtAccessTokenConverter = new JwtAccessTokenConverter();
		jwtAccessTokenConverter.setSigningKey(SIGNING_KEY);
		return jwtAccessTokenConverter;
	}

}
